// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --------- //
// injection //
// --------- //

#define injection_wrap_target 0
#define injection_wrap 9
#define injection_pio_version 1

static const uint16_t injection_program_instructions[] = {
            //     .wrap_target
    0xe007, //  0: set    pins, 7                    
    0x80a0, //  1: pull   block                      
    0x6068, //  2: out    null, 8                    
    0x6038, //  3: out    x, 24                      
    0xa001, //  4: mov    pins, x                    
    0xe001, //  5: set    pins, 1                    
    0xa542, //  6: nop                           [5] 
    0xe020, //  7: set    x, 0                       
    0xe003, //  8: set    pins, 3                    
    0xa001, //  9: mov    pins, x                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program injection_program = {
    .instructions = injection_program_instructions,
    .length = 10,
    .origin = -1,
    .pio_version = injection_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config injection_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + injection_wrap_target, offset + injection_wrap);
    return c;
}

// DO NOT touch below unless you absolutely have to. Helper script for setting up ASM.
void injection_program_init(PIO pio, 
                            uint state_machine, 
                            int offset, 
                            uint8_t pin_start,
                            uint8_t pin_count,
                            float div){
    pio_sm_config c = injection_program_get_default_config(offset);
    sm_config_set_out_shift(&c, false, false, 32);
    sm_config_set_out_pins(&c, pin_start, pin_count);
    sm_config_set_set_pins(&c, pin_start + pin_count, 3);
    for (uint i = pin_start; i < (pin_count); i++){
        pio_gpio_init(pio, i);
    }
    for (uint i = 0; i < 3; i++){
        pio_gpio_init(pio, i + pin_start + pin_count);
    }
    pio_sm_set_consecutive_pindirs(pio, state_machine, pin_start, pin_count + 3, true);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, state_machine, offset, &c);
}

#endif

